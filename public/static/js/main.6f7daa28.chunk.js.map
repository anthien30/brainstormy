{"version":3,"sources":["components/LoginPage.js","Reducer.js","Store.js","components/FirebaseConfig.js","components/Login.js","utils/refreshToken.js","components/Logout.js","components/Google.js","components/ColorPicker.js","components/Canvas.js","components/CanvasContainer.js","App.js","reportWebVitals.js","index.js"],"names":["LoginPage","props","className","children","Reducer","state","action","type","console","log","googleObj","obj","colorHexCode","canvasId","initialState","Context","createContext","Store","useReducer","dispatch","Provider","value","config","apiKey","process","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","FIREBASE_MESSAGINGSENDERID","appId","FIREBASE_APPID","measurementId","FIREBASE_MEASUREMENTID","firebase","initializeApp","auth","database","GoogleAuthProvider","Login","avaliableCanvasId","useContext","clientId","buttonText","onSuccess","res","profileObj","setNewData","ref","googleId","set","x1","y1","x2","y2","isDrawing","error","alert","ServerValue","increment","name","refreshTiming","tokenObj","expires_in","refreshToken","a","reloadAuthResponse","newAuthRes","localStorage","setItem","id_token","setTimeout","refreshTokenSetup","setLoggedIn","setName","givenName","once","snapshot","exists","update","val","currentAvaliableCanvas","then","catch","err","onFailure","cookiePolicy","isSignedIn","Logout","onLogoutSuccess","Google","useState","loggedIn","bool","to","ColorPicker","setColorHexCode","useEffect","onChange","e","hexCode","target","Canvas","localContext","canvasRef","useRef","backgroundCanvasRef","contextRef","setIsDrawing","CanDraw","setCanDraw","buttonStr","setButtonStr","someoneIsDrawing","setSomeoneIsDrawing","prevMouseX","setPrevMouseX","prevMouseY","setPrevMouseY","testState","canvasLayers","contextArr","setContextArr","current","strokeStyle","i","width","height","style","temp","tempCtx","getContext","scale","lineCap","lineWidth","push","on","b","forEach","child","uid","key","ctx","backgroundContext","beginPath","moveTo","lineTo","stroke","closePath","drawImage","clearRect","writeCoordinates","mouseX","mouseY","writeIsDrawing","startDrawing","nativeEvent","offsetX","offsetY","draw","position","onMouseDown","onMouseUp","onMouseMove","id","left","top","zIndex","map","layer","onClick","display","CanvasContainer","dimensions","setDimensions","clientWidth","clientHeight","backgroundColor","App","path","exact","component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"yPAaeA,G,cATG,SAACC,GACjB,OACE,sBAAKC,UAAU,aAAf,UACE,6CACA,8BAAMD,EAAME,gB,wDCiBHC,EAzBC,SAACC,EAAOC,GACtB,OAAQA,EAAOC,MACb,IAAK,SAEH,OADAC,QAAQC,IAAI,aACL,2BACFJ,GADL,IAEEK,UAAWJ,EAAOK,MAEtB,IAAK,kBAEH,OADAH,QAAQC,IAAI,aACL,2BACFJ,GADL,IAEEO,aAAcN,EAAOK,MAEzB,IAAK,cAED,OADAH,QAAQC,IAAI,aAAeH,EAAOK,KAC3B,2BACAN,GADP,IAEIQ,SAAUP,EAAOK,MAEzB,QACE,OAAON,ICjBTS,EAAe,CACjBJ,UAAW,GACXE,aAAc,UACdC,UAAW,GA6BAE,EAAUC,wBAAcF,GACtBG,EARD,SAAC,GAAkB,IAAhBd,EAAe,EAAfA,SAAe,EACJe,qBAAWd,EAASU,GADhB,mBACvBT,EADuB,KAChBc,EADgB,KAE9B,OACE,cAACJ,EAAQK,SAAT,CAAkBC,MAAO,CAAChB,EAAOc,GAAjC,SAA6ChB,KC1B7CmB,G,qBAAS,CACTC,OAAQC,0CACRC,WAAY,oCACZC,YAAa,wDACbC,UAAW,oBACXC,cAAe,gCACfC,kBAAmBL,odAAYM,2BAC/BC,MAAOP,odAAYQ,eACnBC,cAAeT,odAAYU,yBAE/BC,IAASC,cAAcd,GAEVa,IAASE,OACXF,IAASG,WAEO,IAAIH,IAASE,KAAKE,mBCmE9BC,MA9Ef,SAAevC,GAAQ,IAGjBwC,EAHgB,EAEMC,qBAAW3B,GAFjB,mBAEbV,EAFa,KAENc,EAFM,KA+DpB,OAEE,8BACE,cAAC,cAAD,CACEwB,SArES,0EAsETC,WAAW,QACXC,UAjEY,SAACC,GACjBtC,QAAQC,IAAI,8BAA+BqC,EAAIC,YAE/C,IAAMC,EAAa,WACjBb,IAASG,WAAWW,IAAI,SAAWH,EAAIC,WAAWG,UAAUC,IAAI,CAC9DC,GAAI,EACJC,GAAI,EACJC,IAAK,EACLC,IAAK,EACLC,WAAW,EACX5C,aAAc,UACdC,SAAU4B,IACT,SAACgB,GAAYC,MAAM,mBAAD,OAAoBZ,EAAIC,WAAWG,cACxDf,IAASG,WAAWW,IAAI,gCAAgCE,IAAIhB,IAASG,SAASqB,YAAYC,UAAU,IACpGzC,EAAS,CAAEZ,KAAM,cAAeI,IAAK8B,KAavCiB,MAAM,mCAAD,OACgCZ,EAAIC,WAAWc,KAD/C,2DCzCwB,SAACf,GAE9B,IAAIgB,EAA6D,KAA5ChB,EAAIiB,SAASC,YAAc,MAE1CC,EAAY,uCAAG,4BAAAC,EAAA,sEACMpB,EAAIqB,qBADV,OACbC,EADa,OAEnBN,EAA2D,KAA1CM,EAAWJ,YAAc,MAC1CxD,QAAQC,IAAI,cAAe2D,GAE3BC,aAAaC,QAAQ,YAAaF,EAAWG,UAG7CC,WAAWP,EAAcH,GARN,2CAAH,qDAYlBU,WAAWP,EAAcH,GD4BzBW,CAAkB3B,GAClB7C,EAAMyE,aAAY,GAClBzE,EAAM0E,QAAQ7B,EAAIC,WAAW6B,WAC7BzD,EAAS,CAAEZ,KAAM,SAAUI,IAAKmC,EAAIC,aACpC5B,EAAS,CAAEZ,KAAM,kBAAmBI,IAAK,YACzCH,QAAQC,IAAI,gBAAkBJ,EAAMK,UAAUwC,UAG9Cf,IAASG,WAAWW,IAAI,SAAWH,EAAIC,WAAWG,UAAU2B,KAAK,SAAS,SAAAC,GACpEA,EAASC,UArBb5C,IAASG,WAAWW,IAAI,SAAWH,EAAIC,WAAWG,UAAU8B,OAAO,CACjE5B,GAAI,EACJC,GAAI,EACJC,IAAK,EACLC,IAAK,EACLC,WAAW,EACX5C,aAAc,YAkBdO,EAAS,CAAEZ,KAAM,cAAeI,IAAKmE,EAASG,MAAMpE,YAGpDsB,IAASG,WAAWW,IAAI,UAAU4B,KAAK,SAAS,SAACC,GAC/CrC,EAAoBqC,EAASG,MAAMC,0BAClC,SAACzB,GAAD,OAAWC,MAAM,gBAAcyB,KAAKnC,GAAYoC,OAAM,SAACC,GAAD,OAAS3B,MAAM2B,UAmBxEC,UAdY,SAACxC,GACjBtC,QAAQC,IAAI,qBAAsBqC,GAClCY,MAAM,mDAaF6B,aAAc,qBACdC,YAAY,OE1DLC,MAnBf,SAAgBxF,GAQd,OACE,8BACE,cAAC,eAAD,CACE0C,SAbS,0EAcTC,WAAW,SACX8C,gBAXY,WAChBlF,QAAQC,IAAI,4BACZiD,MAAM,mCACNzD,EAAMyE,aAAY,SCHP,SAASiB,EAAO1F,GAAQ,IAAD,EACJ2F,oBAAS,GADL,mBAC7BC,EAD6B,KACnBnB,EADmB,OAEZkB,qBAFY,mBAE7B/B,EAF6B,KAEvBc,EAFuB,KAIpC,OACE,iCACIkB,GACA,cAAC,EAAD,CACEA,SAAUA,EACVnB,YAAa,SAACoB,GAAD,OAAUpB,EAAYoB,IACnCnB,QAAS,SAACd,GAAD,OAAUc,EAAQd,MAG9BgC,EAAW,uCAAUhC,KAAY,8CACjCgC,GACC,gCACE,cAAC,IAAD,CAAME,GAAG,QAAT,2BACA,uBACA,cAAC,EAAD,CACEF,SAAUA,EACVnB,YAAa,SAACoB,GAAD,OAAUpB,EAAYoB,Y,WCehCE,EAtCK,WAAO,IAAD,EACgBJ,mBAAS,WADzB,mBACjBhF,EADiB,KACHqF,EADG,OAEEvD,qBAAW3B,GAFb,mBAEjBV,EAFiB,KAEVc,EAFU,KAIxB+E,qBAAU,WACR1F,QAAQC,IAAI,mBACZD,QAAQC,IAAR,iCACmBG,EADnB,mCAEoBP,EAAMO,aAF1B,aAIC,CAACA,IAUJ,OACE,8BACE,2DAEE,uBACEL,KAAK,QACLc,MAAOT,EACPuF,SAAU,SAACC,GAfI,IAACC,EAgBdlF,EAAS,CAAEZ,KAAM,kBAAmBI,IAAKyF,EAAEE,OAAOjF,QAClD4E,EAAgBG,EAAEE,OAAOjF,OAjBXgF,EAkBCD,EAAEE,OAAOjF,MAhBhCb,QAAQC,IAAI,WACZ0B,IAASG,WAAWW,IAAI,SAAW5C,EAAMK,UAAUwC,UAAU8B,OAAO,CAC9DpE,aAAcyF,aC8RTE,MAzSf,SAAgBtG,GACZ,IAgBIuG,EAhBEC,EAAYC,iBAAO,IACnBC,EAAsBD,mBACtBE,EAAaF,iBAAO,MAHP,GAIDA,iBAAO,MACSd,oBAAS,IALxB,mBAKZpC,EALY,KAKDqD,EALC,OAMWjB,oBAAS,GANpB,mBAMZkB,EANY,KAMHC,EANG,OAOenB,mBAAS,QAPxB,mBAOZoB,EAPY,KAODC,EAPC,OAQ6BrB,oBAAS,GARtC,mBAQZsB,EARY,KAQMC,EARN,OASiBvB,mBAAS,GAT1B,mBASZwB,EATY,KASAC,EATA,OAUiBzB,mBAAS,GAV1B,mBAUZ0B,EAVY,KAUAC,EAVA,OAWO7E,qBAAW3B,GAXlB,mBAWZV,EAXY,aAYeuF,mBAAS,IAZxB,mBAYZ4B,EAZY,aAaqB5B,mBAAS,CAAC,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,cAbzP,mBAaZ6B,EAbY,aAcgB7B,mBAAS,KAdzB,mBAcZ8B,EAdY,KAcDC,EAdC,KAkBnBzB,qBAAU,WACFU,EAAWgB,UACXhB,EAAWgB,QAAQC,YAAcxH,EAAMO,gBAE5C,CAACP,EAAMO,eAEVsF,qBAAU,WAEN,IAAK,IAAI4B,EAAI,EAAGA,EAXK,GAWiBA,IAC9BrB,EAAUmB,QAAQE,KAElBrB,EAAUmB,QAAQE,GAAGC,MAAsB,EAAd9H,EAAM8H,MACnCtB,EAAUmB,QAAQE,GAAGE,OAAwB,EAAf/H,EAAM+H,OACpCvB,EAAUmB,QAAQE,GAAGG,MAAMF,MAA3B,UAAsC9H,EAAM8H,MAA5C,MACAtB,EAAUmB,QAAQE,GAAGG,MAAMD,OAA3B,UAAuC/H,EAAM+H,OAA7C,OAKRrB,EAAoBiB,QAAQG,MAAsB,EAAd9H,EAAM8H,MAC1CpB,EAAoBiB,QAAQI,OAAwB,EAAf/H,EAAM+H,OAC3CrB,EAAoBiB,QAAQK,MAAMF,MAAlC,UAA6C9H,EAAM8H,MAAnD,MACApB,EAAoBiB,QAAQK,MAAMD,OAAlC,UAA8C/H,EAAM+H,OAApD,MAIA,IADA,IAAIE,EAAO,GACHJ,EAAI,EAAGA,EA7BM,GA6BgBA,IAAI,CACrC,IAAIK,EAAU1B,EAAUmB,QAAQE,GAAGM,WAAW,MAC9CD,EAAQE,MAAM,EAAE,GAChBF,EAAQG,QAAU,QAClBH,EAAQN,YAAc,QACtBM,EAAQI,UAAY,GACpBL,EAAKM,KAAKL,GAEdR,EAAcO,GACd1H,QAAQC,IAAIiH,GAGTA,EAAWzH,EAAMY,aAChB2F,EAAekB,EAAWzH,EAAMY,WACnBgH,YAAcxH,EAAMO,cAGrCgG,EAAWgB,QAAUpB,EAGrBrE,IACKG,WACAW,IAAI,UACJwF,GAAG,SAAS,SAAC3D,GACV,GAAIA,EAASC,SAAU,CACnB,IAAI2D,GAAI,EACR5D,EAAS6D,SAAQ,SAACC,GACd,GAAIA,EAAM3D,MAAMzB,UAAW,CAGvB,GAFAkF,GAAI,EACJlI,QAAQC,IAAI,iBAAmBR,EAAM4I,MAAQD,EAAME,MAC/C7I,EAAM4I,MAAQD,EAAME,IACpB,OAAO,EAEX,GAAwC,MAApCpB,EAAWkB,EAAM3D,MAAMpE,UAGvB,OAFAL,QAAQC,IAAI,yBAA2BmI,EAAM3D,MAAMpE,eACnDL,QAAQC,IAAIgG,EAAUmB,QAAQ,IAIlC,IAAImB,EAAMrB,EAAWkB,EAAM3D,MAAMpE,UAC7BmI,EAAoBrC,EAAoBiB,QAAQQ,WAAW,MAC/DW,EAAIlB,YAAce,EAAM3D,MAAMrE,aAC9BmI,EAAIE,YACJF,EAAIG,OAAON,EAAM3D,MAAM7B,GAAIwF,EAAM3D,MAAM5B,IACvC0F,EAAII,OAAOP,EAAM3D,MAAM3B,GAAIsF,EAAM3D,MAAM1B,IACvCwF,EAAIK,SACJL,EAAIM,YACJL,EAAkBM,UAAU7C,EAAUmB,QAAQgB,EAAM3D,MAAMpE,UAAU,EAAE,GACtEkI,EAAIQ,UAAU,EAAE,EAAgB,EAAdtJ,EAAM8H,MAA0B,EAAf9H,EAAM+H,QACzCxH,QAAQC,IAAI,eAIhB0G,IADAuB,QAMJlI,QAAQC,IAAI,0BAGzB,CAACR,EAAM8H,MAAO9H,EAAM+H,OAAQvB,EAAWe,IAE1C,IAAMgC,EAAgB,uCAAG,WAAOC,EAAQC,EAAQtC,EAAYE,GAAnC,SAAApD,EAAA,sDAEhBV,EAWDrB,IACKG,WACAW,IAAI,SAAWhD,EAAM4I,KACrB7D,OAAO,CACJ5B,GAAIgE,EACJ/D,GAAIiE,EACJhE,GAAImG,EACJlG,GAAImG,IAjBZvH,IACKG,WACAW,IAAI,SAAWhD,EAAM4I,KACrB7D,OAAO,CACJ5B,GAAIqG,EACJpG,GAAIqG,EACJpG,GAAImG,EACJlG,GAAImG,IAVK,2CAAH,4DAwBhBC,EAAiB,SAACjB,GAEpBvG,IACKG,WACAW,IAAI,SAAWhD,EAAM4I,KACrB7D,OACG,CACIxB,UAAWkF,IAEf,SAACjF,GACOA,GACAjD,QAAQC,IAAI,8BAK1BmJ,EAAY,uCAAG,iCAAA1F,EAAA,yDAAS2F,EAAT,EAASA,YACrB/C,EADY,uBAEbtG,QAAQC,IAAI,aAFC,iCAKjBD,QAAQC,IAAI,SACJqJ,EAAqBD,EAArBC,QAASC,EAAYF,EAAZE,QACjBnD,EAAWgB,QAAQqB,YACnBrC,EAAWgB,QAAQsB,OAAOY,EAASC,GARlB,UASXP,EAAiBM,EAASC,EAAS,EAAG,GAT3B,QAUjB1C,EAAcyC,GACdvC,EAAcwC,GAEdlD,GAAa,GACb8C,GAAe,GAdE,4CAAH,sDAyBZK,EAAI,uCAAG,iCAAA9F,EAAA,yDAAS2F,EAAT,EAASA,YACbrG,GAAcsD,EADV,wDAIDgD,EAAqBD,EAArBC,QAASC,EAAYF,EAAZE,QAJR,SAKHP,EAAiBM,EAASC,EAAS3C,EAAYE,GAL5C,OAOTD,EAAcyC,GACdvC,EAAcwC,GACdnD,EAAWgB,QAAQuB,OAAOW,EAASC,GACnCnD,EAAWgB,QAAQwB,SAVV,4CAAH,sDA+CV,OACI,gCACI,sBAAKnB,MAAO,CAAEgC,SAAU,YAAxB,UAkCI,wBACIC,YAAaN,EACbO,UA9FM,WAClBvD,EAAWgB,QAAQyB,YACK1C,EAAoBiB,QAAQQ,WAAW,MAC7CkB,UAAU7C,EAAUmB,QAAQ3H,EAAMY,UAAU,EAAE,GAChE+F,EAAWgB,QAAQ2B,UAAU,EAAG,EAAGtJ,EAAM8H,MAAO9H,EAAM+H,QACtDnB,GAAa,GACb8C,GAAe,IAyFHS,YAAaJ,EACb/G,IAAK,SAAAiB,GAAC,OAAIuC,EAAUmB,QAAQ3H,EAAMY,UAAYqD,GAC9CmG,GAAI,SAAWpK,EAAMY,SAErBoH,MAAO,CAAEgC,SAAU,WAAYK,KAAM,EAAGC,IAAK,EAAGC,OAAQ,MADnDvK,EAAMY,UAGd4G,EAAagD,KAAI,SAACC,EAAO5B,GACtB,OAAOA,GAAO7I,EAAMY,SAChB,KAEA,wBACIoC,IAAK,SAAAiB,GAAC,OAAIuC,EAAUmB,QAAQkB,GAAO5E,GACnCmG,GAAIK,EACJzC,MAAO,CAAEgC,SAAU,WAAYK,KAAM,EAAGC,IAAK,EAAGC,OAAQ1B,IACnDA,MAEjB,wBACI7F,IAAK0D,EACL0D,GAAI,mBAEJpC,MAAO,CAAEgC,SAAU,WAAYK,KAAM,EAAGC,IAAK,EAAGC,OAAQ,KADlD,MAId,qBAAKvC,MAAO,CAAEF,MAAO9H,EAAM8H,MAAOC,OAAQ/H,EAAM+H,UAChD,gCACI,wBAAQzH,KAAK,SAASoK,QAhGZ,WAEb7D,GAKDC,GAAW,GACXE,EAAa,UALbzG,QAAQC,IAAI,YACZsG,GAAW,GACXE,EAAa,eA2FT,SAA+CD,IAC/C,qBAAKiB,MAAO,CAAEF,MAAO,OAAQC,OAAQ,OAAQ4C,QAAS,kBACtD,wBAAQrK,KAAK,SAASoK,QAvFZ,WAClB,IAAI3B,EAAoBrC,EAAoBiB,QAAQQ,WAAW,MAC/D5H,QAAQC,IAAIR,EAAM8H,MAAQ,UAAY9H,EAAM+H,QAC5CgB,EAAkBO,UAAU,EAAG,EAAG,EAAEtJ,EAAM8H,MAAO,EAAE9H,EAAM+H,SAoFjD,sBAIJ,8BAAMd,EAAmB,qBAAuB,sBAChD,8BACI,cAAC,EAAD,UCxRD2D,MAff,WACI,IAAM5H,EAAMyD,iBAAO,MADI,EAEYd,mBAAS,CAACmC,MAAO,EAAGC,OAAQ,IAFxC,mBAEhB8C,EAFgB,KAELC,EAFK,OAGErI,qBAAW3B,GAHb,mBAGhBV,EAHgB,KAQvB,OARuB,KAIvB6F,qBAAU,WACN6E,EAAc,CAAChD,MAAM9E,EAAI2E,QAAQoD,YAAahD,OAAO/E,EAAI2E,QAAQqD,iBACnE,IACFzK,QAAQC,IAAI,kBAAoBJ,EAAMQ,UAElC,qBAAKoH,MAAO,CAACD,OAAQ,QAASD,MAAO,MAAOmD,gBAAiB,cAAejI,IAAMA,EAAlF,SACI,cAAC,EAAD,CAAQ8E,MAAO+C,EAAW/C,MAAOC,OAAU8C,EAAW9C,OAAQa,IAAOxI,EAAMK,UAAUwC,SAAUrC,SAAYR,EAAMQ,cCqB9GsK,MAzBf,WACE,OACE,cAAC,EAAD,UACA,cAAC,IAAD,UACE,qBAAKjL,UAAU,MAAf,SACE,wBAAQA,UAAU,aAAlB,SACI,eAAC,IAAD,WACE,cAAC,IAAD,CACEkL,KAAK,IACLC,OAAK,EACLC,UAAW,kBACT,cAAC,EAAD,UACE,cAAC3F,EAAD,SAIN,cAAC,IAAD,CAAOyF,KAAK,QAAQC,OAAK,EAACC,UAAWT,gBCfpCU,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBtG,MAAK,YAAkD,IAA/CuG,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.6f7daa28.chunk.js","sourcesContent":["import React from \"react\";\n\nimport \"./LoginPage.css\";\n\nconst LoginPage = (props) => {\n  return (\n    <div className=\"login-page\">\n      <h3>Brainstormy</h3>\n      <div>{props.children}</div>\n    </div>\n  );\n};\n\nexport default LoginPage;\n","const Reducer = (state, action) => {\r\n  switch (action.type) {\r\n    case 'setObj':\r\n      console.log('Triggered');\r\n      return {\r\n        ...state,\r\n        googleObj: action.obj,\r\n      };\r\n    case 'setColorHexCode':\r\n      console.log('Triggered');\r\n      return {\r\n        ...state,\r\n        colorHexCode: action.obj,\r\n      };\r\n    case 'setCanvasId':\r\n        console.log(\"triggerd3 \" + action.obj)\r\n        return {\r\n            ...state,\r\n            canvasId: action.obj\r\n        };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default Reducer;\r\n","import React, { createContext, useReducer } from 'react';\r\nimport Reducer from './Reducer';\r\n\r\n//Contains the global state store for google object\r\nvar initialState = {\r\n  googleObj: {},\r\n  colorHexCode: '#000000',\r\n  canvasId: -1,  \r\n};\r\n\r\nconst saveToLocalStorage = (state) => {\r\n    try{\r\n        const serializedState = JSON.stringify(state);\r\n        localStorage.setItem('state',serializedState);\r\n    } catch(e){\r\n        console.log(e);\r\n        return undefined;\r\n    }\r\n}\r\nconst loadFromLocalStorage = () => {\r\n    try {\r\n        const serializedState = localStorage.getItem('state');\r\n        if(serializedState == null) return undefined\r\n        return JSON.parse(serializedState)\r\n    } catch(e) {\r\n        console.log(e);\r\n        return undefined;\r\n    }\r\n}\r\nconst Store = ({ children }) => {\r\n  const [state, dispatch] = useReducer(Reducer, initialState);\r\n  return (\r\n    <Context.Provider value={[state, dispatch]}>{children}</Context.Provider>\r\n  );\r\n};\r\n\r\nexport const Context = createContext(initialState);\r\nexport default Store;\r\n","import firebase from 'firebase/app'; // doing import firebase from 'firebase' or import * as firebase from firebase is not good practice. \r\nimport 'firebase/auth';\r\nimport 'firebase/firestore';\r\nimport 'firebase/database';\r\n\r\n// Initialize Firebase\r\nlet config = { //store in .env file later\r\n    apiKey: process.env.REACT_APP_FIREBASE_API_KEY,\r\n    authDomain: \"brainstormy-a370a.firebaseapp.com\",\r\n    databaseURL: \"https://brainstormy-a370a-default-rtdb.firebaseio.com\",\r\n    projectId: \"brainstormy-a370a\",\r\n    storageBucket: \"brainstormy-a370a.appspot.com\",\r\n    messagingSenderId: process.env.FIREBASE_MESSAGINGSENDERID,\r\n    appId: process.env.FIREBASE_APPID,\r\n    measurementId: process.env.FIREBASE_MEASUREMENTID\r\n};\r\nfirebase.initializeApp(config);\r\n\r\nconst auth = firebase.auth();\r\nconst db = firebase.database();\r\n\r\nconst googleAuthProvider = new firebase.auth.GoogleAuthProvider();\r\n\r\nexport { auth, firebase, db, googleAuthProvider};","import React, { useState, useContext } from 'react'\r\nimport { GoogleLogin } from 'react-google-login';\r\n// refresh token\r\nimport { refreshTokenSetup } from '../utils/refreshToken';\r\nimport { Context } from '../Store'\r\nimport { firebase, db } from './FirebaseConfig'\r\n\r\n\r\nconst clientId = '31511364762-af73a2fcq1v6mgufrd5otqem4j5ksdi8.apps.googleusercontent.com' //insert client id here\r\n\r\nfunction Login(props) {\r\n\r\n  const [state, dispatch] = useContext(Context);\r\n  let avaliableCanvasId;\r\n  const onSuccess = (res) => {\r\n    console.log('Login Success: currentUser:', res.profileObj);\r\n    //If new data, assign the canvas Id to the new user\r\n    const setNewData = () => {\r\n      firebase.database().ref('board/' + res.profileObj.googleId).set({\r\n        x1: 0,\r\n        y1: 0,\r\n        x2: -1,\r\n        y2: -1,\r\n        isDrawing: false,\r\n        colorHexCode: \"#000000\",\r\n        canvasId: avaliableCanvasId\r\n      }, (error) => { alert(`Write failed to ${res.profileObj.googleId}`) })\r\n      firebase.database().ref('board/currentAvaliableCanvas').set(firebase.database.ServerValue.increment(1))\r\n      dispatch({ type: 'setCanvasId', obj: avaliableCanvasId });\r\n    }\r\n    //If old data, update the data\r\n    const updateOldData = () => {\r\n      firebase.database().ref('board/' + res.profileObj.googleId).update({\r\n        x1: 0,\r\n        y1: 0,\r\n        x2: -1,\r\n        y2: -1,\r\n        isDrawing: false,\r\n        colorHexCode: \"#000000\",\r\n      })\r\n    }\r\n    alert(\r\n      `Logged in successfully! Welcome ${res.profileObj.name} 😍. \\n See console for full profile object.`\r\n    );\r\n    refreshTokenSetup(res);\r\n    props.setLoggedIn(true);\r\n    props.setName(res.profileObj.givenName)\r\n    dispatch({ type: 'setObj', obj: res.profileObj });\r\n    dispatch({ type: 'setColorHexCode', obj: \"#000000\" });\r\n    console.log(\"googleID is  \" + state.googleObj.googleId)\r\n\r\n    //Initialize database data when logged in\r\n    firebase.database().ref('board/' + res.profileObj.googleId).once(\"value\", snapshot => {\r\n      if (snapshot.exists()) {\r\n        updateOldData();\r\n        //Set global store state canvasId to the canvasId of user\r\n        dispatch({ type: 'setCanvasId', obj: snapshot.val().canvasId });\r\n      } else {\r\n        //Get the value for currentAvaliable Canvas.  Then setNewData based on the currentAvaliable Canvas\r\n        firebase.database().ref('board/').once(\"value\", (snapshot) => {\r\n          avaliableCanvasId = snapshot.val().currentAvaliableCanvas;\r\n        }, (error) => alert(\"undefined\")).then(setNewData).catch((err) => alert(err))\r\n      }\r\n    })\r\n  };\r\n\r\n  const onFailure = (res) => {\r\n    console.log('Login failed: res:', res);\r\n    alert(\r\n      `Failed to login 😢. Please try again`\r\n    );\r\n  };\r\n\r\n  return (\r\n\r\n    <div>\r\n      <GoogleLogin\r\n        clientId={clientId}\r\n        buttonText=\"Login\"\r\n        onSuccess={onSuccess}\r\n        onFailure={onFailure}\r\n        cookiePolicy={'single_host_origin'}\r\n        isSignedIn={true}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Login;","export const refreshTokenSetup = (res) => {\r\n    // Timing to renew access token\r\n    let refreshTiming = (res.tokenObj.expires_in || 3600 - 5 * 60) * 1000;\r\n  \r\n    const refreshToken = async () => {\r\n      const newAuthRes = await res.reloadAuthResponse();\r\n      refreshTiming = (newAuthRes.expires_in || 3600 - 5 * 60) * 1000;\r\n      console.log('newAuthRes:', newAuthRes);\r\n      // saveUserToken(newAuthRes.access_token);  <-- save new token\r\n      localStorage.setItem('authToken', newAuthRes.id_token);\r\n  \r\n      // Setup the other timer after the first one\r\n      setTimeout(refreshToken, refreshTiming);\r\n    };\r\n  \r\n    // Setup first refresh timer\r\n    setTimeout(refreshToken, refreshTiming);\r\n  };","import React, { useState } from 'react';\r\nimport { GoogleLogout } from 'react-google-login';\r\n\r\nconst clientId = '31511364762-af73a2fcq1v6mgufrd5otqem4j5ksdi8.apps.googleusercontent.com' //insert client id here\r\n\r\nfunction Logout(props) {\r\n\r\n  const onSuccess = () => {\r\n    console.log('Logout made successfully');\r\n    alert('Logout made successfully ✌');\r\n    props.setLoggedIn(false);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <GoogleLogout\r\n        clientId={clientId}\r\n        buttonText=\"Logout\"\r\n        onLogoutSuccess={onSuccess}\r\n      ></GoogleLogout>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Logout;","import React, { useState, useContext } from \"react\";\r\nimport Login from \"./Login\";\r\nimport Logout from \"./Logout\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { firebase, db } from './FirebaseConfig'\r\n\r\n\r\nexport default function Google(props) {\r\n  const [loggedIn, setLoggedIn] = useState(false);\r\n  const [name, setName] = useState();\r\n\r\n  return (\r\n    <div>\r\n      {!loggedIn && (\r\n        <Login\r\n          loggedIn={loggedIn}\r\n          setLoggedIn={(bool) => setLoggedIn(bool)}\r\n          setName={(name) => setName(name)}\r\n        />\r\n      )}\r\n      {loggedIn ? <p>Hello {name}</p> : <p>Not logged in</p>}\r\n      {loggedIn && (\r\n        <div>\r\n          <Link to=\"/draw\">Go to Drawing</Link>\r\n          <hr />\r\n          <Logout\r\n            loggedIn={loggedIn}\r\n            setLoggedIn={(bool) => setLoggedIn(bool)}\r\n          />\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n","import React, { useState, useContext, useEffect } from 'react';\nimport { Context } from '../Store';\nimport { firebase, db } from './FirebaseConfig';\n\nconst ColorPicker = () => {\n  const [colorHexCode, setColorHexCode] = useState('#000000');\n  const [state, dispatch] = useContext(Context);\n\n  useEffect(() => {\n    console.log('Changed hexcode');\n    console.log(`\n      local hexcode: ${colorHexCode}\n      global hexcode: ${state.colorHexCode}\n    `);\n  }, [colorHexCode]);\n\n  const writeIsDrawing = (hexCode) => {\n    //Writes colorHexCode to firebase\n    console.log(\"written\")\n    firebase.database().ref('board/' + state.googleObj.googleId).update({\n          colorHexCode: hexCode\n    });\n  }\n\n  return (\n    <div>\n      <div>\n        Select Brush Color: &nbsp;\n        <input\n          type=\"color\"\n          value={colorHexCode}\n          onChange={(e) => {\n            dispatch({ type: 'setColorHexCode', obj: e.target.value });\n            setColorHexCode(e.target.value);\n            writeIsDrawing(e.target.value);\n          }}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default ColorPicker;\n","import { render } from '@testing-library/react';\r\nimport React, { useState, useEffect, useRef, useLayoutEffect, useContext, useCallback } from 'react';\r\nimport ColorPicker from './ColorPicker';\r\nimport { firebase, db } from './FirebaseConfig';\r\nimport { Context } from '../Store';\r\n\r\n/* Followed tutorial by Maksim Ivanov (thank you) https://www.youtube.com/watch?v=FLESHMJ-bI0&t=189s */\r\n\r\n//Pass 2 props: height and width\r\nfunction Canvas(props) {\r\n    const canvasRef = useRef([]); //Create Ref object to canvas\r\n    const backgroundCanvasRef = useRef(); //Create Ref object to background canvas\r\n    const contextRef = useRef(null); //Create Ref object to context\r\n    const parentRef = useRef(null); //Create Ref object to parent component\r\n    const [isDrawing, setIsDrawing] = useState(false); //isDrawing State\r\n    const [CanDraw, setCanDraw] = useState(false);   //canDraw is toggled by the draw button and allows user to draw.\r\n    const [buttonStr, setButtonStr] = useState('Draw');  //The string on the draw button\r\n    const [someoneIsDrawing, setSomeoneIsDrawing] = useState(false);  //Lets the server know if someone is drawing\r\n    const [prevMouseX, setPrevMouseX] = useState(0); //Previous mouse X coordinate for the server\r\n    const [prevMouseY, setPrevMouseY] = useState(0); //Previous mouse Y coordinate for the server\r\n    const [state, dispatch] = useContext(Context); //Global state containing profile object and hexColor\r\n    const [testState, setTestState] = useState(0);\r\n    const [canvasLayers, setCanvasLayers] = useState([\"canvas0\", \"canvas1\", \"canvas2\", \"canvas3\", \"canvas4\", \"canvas5\", \"canvas6\", \"canvas7\", \"canvas8\", \"canvas9\", \"canvas10\", \"canvas11\", \"canvas12\", \"canvas13\", \"canvas14\", \"canvas15\", \"canvas16\", \"canvas17\", \"canvas18\", \"canvas19\", ]);\r\n    const [contextArr,setContextArr] = useState([]);\r\n    const numberOfCanvases = 20;\r\n\r\n    let localContext;\r\n    useEffect(() => {\r\n        if (contextRef.current) {\r\n            contextRef.current.strokeStyle = state.colorHexCode;\r\n        }\r\n    }, [state.colorHexCode]);\r\n    //Sets up the canvas\r\n    useEffect(() => {\r\n        //Sets the width and height of all the canvases\r\n        for (let i = 0; i < numberOfCanvases; i++) {\r\n            if (canvasRef.current[i]) {\r\n                // console.log(canvasRef.current[i]);\r\n                canvasRef.current[i].width = props.width * 2;\r\n                canvasRef.current[i].height = props.height * 2;\r\n                canvasRef.current[i].style.width = `${props.width}px`;\r\n                canvasRef.current[i].style.height = `${props.height}px`;\r\n\r\n            }\r\n        }\r\n        //Sets up the Background Canvas\r\n        backgroundCanvasRef.current.width = props.width * 2;\r\n        backgroundCanvasRef.current.height = props.height * 2;\r\n        backgroundCanvasRef.current.style.width = `${props.width}px`;\r\n        backgroundCanvasRef.current.style.height = `${props.height}px`;\r\n        \r\n        //Sets the constant properties of 2d context\r\n        let temp = [];\r\n        for(let i = 0; i < numberOfCanvases; i++){\r\n            let tempCtx = canvasRef.current[i].getContext('2d');\r\n            tempCtx.scale(2,2);\r\n            tempCtx.lineCap = 'round';\r\n            tempCtx.strokeStyle = 'black';\r\n            tempCtx.lineWidth = 10;\r\n            temp.push(tempCtx);\r\n        }\r\n        setContextArr(temp);\r\n        console.log(contextArr);\r\n\r\n        //Assigns the localContext the local client can draw on\r\n        if(contextArr[props.canvasId]){\r\n            localContext = contextArr[props.canvasId]; //gets the 2d context\r\n            localContext.strokeStyle = state.colorHexCode;\r\n        }\r\n        \r\n        contextRef.current = localContext\r\n\r\n        // Firebase On Draw Event\r\n        firebase\r\n            .database()\r\n            .ref('board/')\r\n            .on('value', (snapshot) => {\r\n                if (snapshot.exists()) {\r\n                    let b = false;\r\n                    snapshot.forEach((child) => {\r\n                        if (child.val().isDrawing) {\r\n                            b = true;\r\n                            console.log(\"boolean val: \" + (props.uid === child.key));\r\n                            if (props.uid === child.key) {\r\n                                return 0;\r\n                            }\r\n                            if (contextArr[child.val().canvasId] == null) {\r\n                                console.log(\"canvasRef is null for \" + child.val().canvasId);\r\n                                console.log(canvasRef.current[1])\r\n                                return;\r\n                            }\r\n\r\n                            let ctx = contextArr[child.val().canvasId]\r\n                            let backgroundContext = backgroundCanvasRef.current.getContext('2d');\r\n                            ctx.strokeStyle = child.val().colorHexCode;\r\n                            ctx.beginPath();\r\n                            ctx.moveTo(child.val().x1, child.val().y1);\r\n                            ctx.lineTo(child.val().x2, child.val().y2);\r\n                            ctx.stroke();\r\n                            ctx.closePath();\r\n                            backgroundContext.drawImage(canvasRef.current[child.val().canvasId],0,0);\r\n                            ctx.clearRect(0,0,props.width * 2, props.height * 2)\r\n                            console.log(\"written\");\r\n                        }\r\n                    });\r\n                    if (b) {\r\n                        setSomeoneIsDrawing(true);\r\n                    } else {\r\n                        setSomeoneIsDrawing(false);\r\n                    }\r\n                } else {\r\n                    console.log('No data available');\r\n                }\r\n            });\r\n    }, [props.width, props.height, canvasRef, testState]);\r\n\r\n    const writeCoordinates = async (mouseX, mouseY, prevMouseX, prevMouseY) => {\r\n        //Writes data to firebase\r\n        if (!isDrawing) {\r\n            firebase\r\n                .database()\r\n                .ref('board/' + props.uid)\r\n                .update({\r\n                    x1: mouseX,\r\n                    y1: mouseY,\r\n                    x2: mouseX,\r\n                    y2: mouseY,\r\n                });\r\n        } else {\r\n            firebase\r\n                .database()\r\n                .ref('board/' + props.uid)\r\n                .update({\r\n                    x1: prevMouseX,\r\n                    y1: prevMouseY,\r\n                    x2: mouseX,\r\n                    y2: mouseY,\r\n                });\r\n        }\r\n    };\r\n    const writeIsDrawing = (b) => {\r\n        //Writes data to firebase\r\n        firebase\r\n            .database()\r\n            .ref('board/' + props.uid)\r\n            .update(\r\n                {\r\n                    isDrawing: b,\r\n                },\r\n                (error) => {\r\n                    if (error) {\r\n                        console.log('writeNotDrawing Failed');\r\n                    }\r\n                }\r\n            );\r\n    };\r\n    const startDrawing = async ({ nativeEvent }) => {\r\n        if (!CanDraw) {\r\n            console.log(\"cant draw\")\r\n            return;\r\n        }\r\n        console.log(\"start\")\r\n        const { offsetX, offsetY } = nativeEvent;\r\n        contextRef.current.beginPath();\r\n        contextRef.current.moveTo(offsetX, offsetY); //Begins path at current mouse Position\r\n        await writeCoordinates(offsetX, offsetY, 0, 0);\r\n        setPrevMouseX(offsetX);\r\n        setPrevMouseY(offsetY);\r\n\r\n        setIsDrawing(true);\r\n        writeIsDrawing(true);\r\n    };\r\n    const finishDrawing = () => {\r\n        contextRef.current.closePath();\r\n        let backgroundContext = backgroundCanvasRef.current.getContext('2d');\r\n        backgroundContext.drawImage(canvasRef.current[props.canvasId],0,0);\r\n        contextRef.current.clearRect(0, 0, props.width, props.height);\r\n        setIsDrawing(false);\r\n        writeIsDrawing(false);\r\n    };\r\n\r\n    const draw = async ({ nativeEvent }) => {\r\n        if (!isDrawing || !CanDraw) {\r\n            return;\r\n        }\r\n        const { offsetX, offsetY } = nativeEvent;\r\n        await writeCoordinates(offsetX, offsetY, prevMouseX, prevMouseY);\r\n\r\n        setPrevMouseX(offsetX);\r\n        setPrevMouseY(offsetY);\r\n        contextRef.current.lineTo(offsetX, offsetY); //Moves path to current mouse Position\r\n        contextRef.current.stroke(); //Renders the Stroke\r\n        // let backgroundContext = backgroundCanvasRef.current.getContext('2d');\r\n        // backgroundContext.drawImage(canvasRef.current[props.canvasId],0,0);\r\n        // contextRef.current.clearRect(0, 0, props.width*2, props.height*2);\r\n    };\r\n    const clickHandler1 = () => {\r\n\r\n        if (!CanDraw) {\r\n            console.log(\"Can draw\")\r\n            setCanDraw(true);\r\n            setButtonStr('Stop Draw');\r\n        } else {\r\n            setCanDraw(false);\r\n            setButtonStr('Draw');\r\n        }\r\n    };\r\n    const clickHandler2 = () => { //clears the background canvas\r\n        let backgroundContext = backgroundCanvasRef.current.getContext('2d');\r\n        console.log(props.width + \" _____ \" + props.height)\r\n        backgroundContext.clearRect(0, 0, 2*props.width, 2*props.height);\r\n    };\r\n    // const test = () => {\r\n    //     console.log(\"test1\");\r\n    //     if (canvasRef.current[4]) {\r\n    //         console.log(\"test2\");\r\n    //         let ctx = backgroundCanvasRef.current.getContext('2d');\r\n    //         ctx.beginPath();\r\n    //         ctx.rect(20, 20, 150, 100);\r\n    //         ctx.stroke();\r\n    //         console.log(\"test3\");\r\n    //     }\r\n    // }\r\n    // const test2 = () => {\r\n    //     console.log(\"rerendered\")\r\n    //     setTestState(testState => !testState);\r\n    // }\r\n    \r\n    return (\r\n        <div>\r\n            <div style={{ position: 'relative' }}>\r\n                {/* <canvas\r\n                    onMouseDown={startDrawing}\r\n                    onMouseUp={finishDrawing}\r\n                    onMouseMove={draw}\r\n                    ref={a => canvasRef.current[0] = a}\r\n                    id={\"canvas0\"}\r\n                    key={0}\r\n                    style={{ position: \"absolute\", left: 0, top: 0, zIndex: 100 }}\r\n                />\r\n                <canvas\r\n                    ref={a => canvasRef.current[1] = a}\r\n                    id={\"canvas1\"}\r\n                    key={1}\r\n                    style={{ position: \"absolute\", left: 0, top: 0, zIndex: 1 }}\r\n                />\r\n                <canvas\r\n                    ref={a => canvasRef.current[2] = a}\r\n                    id={\"canvas2\"}\r\n                    key={2}\r\n                    style={{ position: \"absolute\", left: 0, top: 0, zIndex: 2 }}\r\n                />\r\n                <canvas\r\n                    ref={a => canvasRef.current[3] = a}\r\n                    id={\"canvas3\"}\r\n                    key={3}\r\n                    style={{ position: \"absolute\", left: 0, top: 0, zIndex: 3 }}\r\n                />\r\n                <canvas\r\n                    ref={a => canvasRef.current[4] = a}\r\n                    id={\"canvas4\"}\r\n                    key={4}\r\n                    style={{ position: \"absolute\", left: 0, top: 0, zIndex: 4 }}\r\n                /> */}\r\n                <canvas\r\n                    onMouseDown={startDrawing}\r\n                    onMouseUp={finishDrawing}\r\n                    onMouseMove={draw}\r\n                    ref={a => canvasRef.current[props.canvasId] = a}\r\n                    id={\"canvas\" + props.canvasId}\r\n                    key={props.canvasId}\r\n                    style={{ position: \"absolute\", left: 0, top: 0, zIndex: 100 }}\r\n                />\r\n                {canvasLayers.map((layer, key) => {\r\n                    return key == props.canvasId ?\r\n                        null\r\n                        :\r\n                        <canvas\r\n                            ref={a => canvasRef.current[key] = a}\r\n                            id={layer}\r\n                            style={{ position: \"absolute\", left: 0, top: 0, zIndex: key }}\r\n                            key={key} />\r\n                })}\r\n                <canvas\r\n                    ref={backgroundCanvasRef}\r\n                    id={\"backgroundCanvas\"}\r\n                    key={-1}\r\n                    style={{ position: \"absolute\", left: 0, top: 0, zIndex: 0 }}\r\n                />\r\n            </div>\r\n            <div style={{ width: props.width, height: props.height }} />\r\n            <div>\r\n                <button type=\"button\" onClick={clickHandler1}>{buttonStr}</button>\r\n                <div style={{ width: '50px', height: 'auto', display: 'inline-block' }} />\r\n                <button type=\"button\" onClick={clickHandler2}>Clear</button>\r\n                {/* <button type=\"button\" onClick={test}>Test</button>\r\n                <button type=\"button\" onClick={test2}>ReRender</button> */}\r\n            </div>\r\n            <div>{someoneIsDrawing ? 'Someone is Drawing' : 'No one is Drawing'}</div>\r\n            <div>\r\n                <ColorPicker />\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Canvas;\r\n","import React,{useRef,useState,useLayoutEffect,useEffect,useContext} from 'react'\r\nimport Canvas from './Canvas'\r\nimport { googleAuthProvider } from './FirebaseConfig'\r\nimport {Context} from '../Store'\r\n//This was used to test the Canvas Component size\r\nfunction CanvasContainer() {\r\n    const ref = useRef(null)\r\n    const [dimensions,setDimensions] = useState({width: 0, height: 0})\r\n    const [state,dispatch] = useContext(Context)\r\n    useEffect(() => {\r\n        setDimensions({width:ref.current.clientWidth, height:ref.current.clientHeight})\r\n    },[])\r\n    console.log(\"From Container:\" + state.canvasId)\r\n    return (\r\n        <div style={{height: \"600px\", width: \"60%\", backgroundColor: \"powderblue\"}} ref ={ref}>\r\n            <Canvas width={dimensions.width} height = {dimensions.height} uid = {state.googleObj.googleId} canvasId = {state.canvasId}/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CanvasContainer","import { Switch, Route, BrowserRouter } from \"react-router-dom\";\r\nimport React, { useState } from 'react'\r\nimport \"./App.css\";\r\nimport LoginPage from \"./components/LoginPage\";\r\nimport firebase from 'firebase/app';\r\nimport Google from \"./components/Google\";\r\nimport CanvasContainer from \"./components/CanvasContainer\";\r\nimport Store from './Store'\r\n\r\n\r\n\r\nfunction App() {\r\n  return (\r\n    <Store>\r\n    <BrowserRouter>\r\n      <div className=\"App\">\r\n        <header className=\"App-header\">\r\n            <Switch>\r\n              <Route\r\n                path=\"/\"\r\n                exact\r\n                component={() => (\r\n                  <LoginPage>   \r\n                    <Google />\r\n                  </LoginPage>\r\n                )}\r\n              />\r\n              <Route path=\"/draw\" exact component={CanvasContainer} />\r\n            </Switch>\r\n        </header>\r\n      </div>\r\n    </BrowserRouter>\r\n    </Store>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}